# ============================================
# Nginx Main Configuration cho Staging Environment
# ============================================
# File này cấu hình toàn bộ Nginx server
# Tối ưu cho performance và security

# ============================================
# Basic Server Configuration
# ============================================
# user nginx: Nginx sẽ chạy với user nginx (security)
user nginx;

# worker_processes auto: Nginx tự động detect số CPU cores và tạo worker processes tương ứng
# VD: VPS có 2 cores thì sẽ tạo 2 worker processes
worker_processes auto;

# error_log: Nơi lưu error logs với level warn trở lên
error_log /var/log/nginx/error.log warn;

# pid: File lưu process ID của Nginx master process
pid /var/run/nginx.pid;

# ============================================
# Events Configuration (Performance Tuning)
# ============================================
events {
    # worker_connections: Số connection tối đa mỗi worker process có thể handle
    # 1024 connections x 2 workers = 2048 total connections
    worker_connections 1024;
    
    # use epoll: Sử dụng epoll (Linux) để handle events hiệu quả hơn
    use epoll;
    
    # multi_accept on: Cho phép worker accept nhiều connections cùng lúc
    multi_accept on;
}

# ============================================
# HTTP Configuration Block
# ============================================
http {
    # ============================================
    # Basic HTTP Settings
    # ============================================
    # include mime.types: Load file extensions mapping (VD: .css -> text/css)
    include /etc/nginx/mime.types;
    
    # default_type: Content-type mặc định nếu không detect được file type
    default_type application/octet-stream;
    
    # ============================================
    # Logging Configuration
    # ============================================
    # log_format: Định nghĩa format của access logs
    # $remote_addr: IP của client
    # $request: HTTP request (GET /api/users HTTP/1.1)
    # $status: HTTP response code (200, 404, 500...)
    # $body_bytes_sent: Số bytes response gửi về client
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    # access_log: Lưu access logs với format đã định nghĩa
    access_log /var/log/nginx/access.log main;
    
    # ============================================
    # Performance Settings
    # ============================================
    # sendfile on: Sử dụng sendfile() system call để transfer files hiệu quả
    sendfile on;
    
    # tcp_nopush on: Gửi HTTP response headers trong 1 packet
    tcp_nopush on;
    
    # tcp_nodelay on: Tắt Nagle algorithm để giảm latency
    tcp_nodelay on;
    
    # keepalive_timeout: Giữ connection alive 65 giây để reuse
    keepalive_timeout 65;
    
    # types_hash_max_size: Kích thước hash table cho MIME types
    types_hash_max_size 2048;
    
    # ============================================
    # Security Headers (Chống các loại tấn công web)
    # ============================================
    # server_tokens off: Ẩn phiên bản Nginx trong response headers
    server_tokens off;
    
    # X-Frame-Options: Chống clickjacking attacks
    # SAMEORIGIN: Chỉ cho phép iframe từ cùng domain
    add_header X-Frame-Options "SAMEORIGIN" always;
    
    # X-Content-Type-Options: Chống MIME type confusion attacks
    # nosniff: Browser không được guess content type
    add_header X-Content-Type-Options "nosniff" always;
    
    # X-XSS-Protection: Bật XSS protection của browser
    # mode=block: Block trang nếu phát hiện XSS
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Referrer-Policy: Kiểm soát thông tin referrer
    # no-referrer-when-downgrade: Không gửi referrer khi từ HTTPS -> HTTP
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    
    # Content-Security-Policy: Kiểm soát nguồn tài nguyên được load
    # default-src 'self': Chỉ load từ cùng domain
    # unsafe-inline: Cho phép inline CSS/JS (cần cho Next.js)
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    # ============================================
    # Gzip Compression (Giảm bandwidth)
    # ============================================
    # gzip on: Bật compression
    gzip on;
    
    # gzip_vary on: Thêm Vary: Accept-Encoding header
    gzip_vary on;
    
    # gzip_proxied any: Compress responses cho tất cả proxied requests
    gzip_proxied any;
    
    # gzip_comp_level 6: Level compression (1-9, 6 là balance tốt)
    gzip_comp_level 6;
    
    # gzip_types: Các loại file sẽ được compress
    gzip_types
        text/plain          # .txt files
        text/css            # .css files
        text/xml            # .xml files
        text/javascript     # .js files
        application/json    # JSON responses
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;      # SVG images
    
    # ============================================
    # Rate Limiting (Chống DDoS và abuse)
    # ============================================
    # limit_req_zone: Tạo memory zone để track request rates
    # $binary_remote_addr: Key theo IP address
    # zone=api:10m: Tên zone và size (10MB memory)
    # rate=10r/s: Cho phép tối đa 10 requests/second per IP
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    
    # Rate limit riêng cho login endpoint (strict hơn)
    # rate=1r/s: Chỉ 1 login request/second per IP
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    
    # ============================================
    # Upstream Servers (Load Balancing)
    # ============================================
    # upstream: Định nghĩa group các backend servers
    # api_backend: Group cho ASP.NET Core API
    upstream api_backend {
        # server api:8080: Container name và port
        server api:8080;
        
        # keepalive 32: Giữ 32 idle connections để reuse
        keepalive 32;
    }
    
    # frontend_backend: Group cho Next.js frontend
    upstream frontend_backend {
        server frontend:3000;
        keepalive 32;
    }
    
    # ============================================
    # Include Server Configurations
    # ============================================
    # Load tất cả .conf files trong conf.d directory
    # Đây là nơi định nghĩa virtual hosts và routing rules
    include /etc/nginx/conf.d/*.conf;
} 